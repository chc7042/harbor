# 멀티 스테이지 빌드를 사용한 프로덕션 프론트엔드 이미지

# Development stage
FROM node:18-alpine AS development

WORKDIR /app

# 개발에 필요한 시스템 패키지 설치
RUN apk add --no-cache curl

# 패키지 파일들을 먼저 복사 (캐시 최적화)
COPY frontend/package*.json ./

# 의존성 설치 (개발 의존성 포함)
RUN npm install

# 소스 코드 복사
COPY frontend/ ./

# 개발 서버 실행
EXPOSE 5173
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

# Build stage
FROM node:18-alpine AS build

WORKDIR /app

# 빌드에 필요한 시스템 패키지 설치
RUN apk add --no-cache python3 make g++

# 패키지 파일들을 먼저 복사
COPY frontend/package*.json ./

# 의존성 설치 (빌드에 필요한 devDependencies 포함)
RUN npm install

# 소스 코드 복사
COPY frontend/ ./

# 환경 변수 설정 (빌드 타임)
ARG VITE_API_URL=
ARG VITE_WS_URL=ws://harbor.roboetech.com
ENV VITE_API_URL=$VITE_API_URL
ENV VITE_WS_URL=$VITE_WS_URL

# 프로덕션 빌드
RUN npm run build

# Production stage with simple HTTP server
FROM node:18-alpine AS production

WORKDIR /app

# 보안을 위한 non-root 사용자 생성
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -u 1001 -G appgroup

# 필요한 패키지 설치
RUN apk add --no-cache curl

# 빌드된 파일들을 복사
COPY --from=build /app/dist ./dist

# 간단한 HTTP 서버용 package.json 생성
RUN echo '{"dependencies":{"serve":"^14.2.0"}}' > package.json && \
    npm install --production

# 사용자 권한 설정
RUN chown -R appuser:appgroup /app

# non-root 사용자로 전환
USER appuser

# 포트 설정
EXPOSE 8080

# 헬스체크 설정
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/ || exit 1

# serve를 사용하여 정적 파일 서빙
CMD ["npx", "serve", "-s", "dist", "-l", "8080"]