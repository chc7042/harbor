version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: harbor-postgres-prod
    restart: unless-stopped
    networks:
      - harbor-network
    environment:
      POSTGRES_DB: ${DB_NAME:-harbor_prod}
      POSTGRES_USER: ${DB_USER:-harbor_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    command: ["postgres", "-c", "ssl=off"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-harbor_user} -d ${DB_NAME:-harbor_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
      args:
        - NODE_ENV=production
    container_name: harbor-backend-prod
    restart: unless-stopped
    networks:
      - harbor-network
    environment:
      NODE_ENV: production
      PORT: 3002

      # Database configuration
      DB_HOST: harbor-postgres-prod
      DB_PORT: 5432
      DB_NAME: harbor_prod
      DB_USER: harbor_user
      DB_PASSWORD: harbor_production_password_2024
      DB_SSL: false

      # JWT configuration
      JWT_SECRET: harbor_production_jwt_secret_key_2024_very_secure_random_string
      JWT_REFRESH_SECRET: harbor_production_refresh_secret_key_2024_very_secure_random
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1h}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}

      # Frontend URL for CORS
      FRONTEND_URL: http://harbor.roboetech.com:8080

      # LDAP configuration
      LDAP_URL: ${LDAP_URL}
      LDAP_BIND_DN: ${LDAP_BIND_DN}
      LDAP_BIND_CREDENTIALS: ${LDAP_BIND_CREDENTIALS}
      LDAP_SEARCH_BASE: ${LDAP_SEARCH_BASE}
      LDAP_SEARCH_FILTER: ${LDAP_SEARCH_FILTER}
      LDAP_TIMEOUT: ${LDAP_TIMEOUT}
      LDAP_CONNECT_TIMEOUT: ${LDAP_CONNECT_TIMEOUT}
      LDAP_RECONNECT: ${LDAP_RECONNECT}
      LDAP_IDLE_TIMEOUT: ${LDAP_IDLE_TIMEOUT}
      LDAP_ATTR_USERNAME: ${LDAP_ATTR_USERNAME}
      LDAP_ATTR_EMAIL: ${LDAP_ATTR_EMAIL}
      LDAP_ATTR_FULL_NAME: ${LDAP_ATTR_FULL_NAME}
      LDAP_ATTR_DEPARTMENT: ${LDAP_ATTR_DEPARTMENT}
      LDAP_DEFAULT_EMAIL_DOMAIN: ${LDAP_DEFAULT_EMAIL_DOMAIN}
      LDAP_DN_TEMPLATE: ${LDAP_DN_TEMPLATE}
      LDAP_DEFAULT_DEPARTMENT_FALLBACK: ${LDAP_DEFAULT_DEPARTMENT_FALLBACK}
      LDAP_DEFAULT_DEPARTMENT: ${LDAP_DEFAULT_DEPARTMENT}
      LDAP_GROUP_BASE: ${LDAP_GROUP_BASE}
      LDAP_PORT: ${LDAP_PORT}

      # Jenkins Configuration
      JENKINS_URL: ${JENKINS_URL}
      JENKINS_USERNAME: ${JENKINS_USERNAME}
      JENKINS_PASSWORD: ${JENKINS_PASSWORD}
      JENKINS_WEBHOOK_SECRET: ${JENKINS_WEBHOOK_SECRET}
      
      # Rate Limiting - DISABLED
      RATE_LIMIT_LOGIN: 999999
      MAX_LOGIN_ATTEMPTS: 999999
      LOCKOUT_DURATION: 1
      DISABLE_RATE_LIMITING: true

      # NAS configuration
      NAS_PATH: ${NAS_PATH:-/nas}
      NAS_HOST_PATH: ${NAS_HOST_PATH}
      NAS_HOST: ${NAS_HOST}
      NAS_SHARE: ${NAS_SHARE}
      NAS_USERNAME: ${NAS_USERNAME}
      NAS_PASSWORD: ${NAS_PASSWORD}
      NAS_DOMAIN: ${NAS_DOMAIN}
      NAS_RELEASE_PATH: ${NAS_RELEASE_PATH}
      NAS_MOUNT_PATH: ${NAS_MOUNT_PATH}
      NAS_SCAN_INTERVAL: ${NAS_SCAN_INTERVAL}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - nas_data:/nas:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs

  # Frontend Web Server
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
      args:
        - VITE_API_URL=${VITE_API_URL:-http://harbor.roboetech.com:3002}
    container_name: harbor-frontend-prod
    restart: unless-stopped
    networks:
      - harbor-network
    environment:
      NGINX_WORKER_PROCESSES: auto
      NGINX_WORKER_CONNECTIONS: 1024
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  # Reverse Proxy & Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: harbor-nginx-prod
    restart: unless-stopped
    networks:
      - harbor-network
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    security_opt:
      - no-new-privileges:true

  # Redis for Session Storage and Caching
  redis:
    image: redis:7-alpine
    container_name: harbor-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - harbor-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    security_opt:
      - no-new-privileges:true

networks:
  harbor-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  ldap_data:
    driver: local
  ldap_config:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  nas_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${NAS_HOST_PATH:-./nas-mock}